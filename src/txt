// Fetch sectors
//  useEffect(() => {
//   if (token) {
//     const fetchSectors = async () => {
//       setLoadingSectors(true);
//       try {
//         const response = await fetch('https://api.fmb52.com/api/sector', {
//           method: 'GET',
//           headers: {
//             'Content-Type': 'application/json',
//             'Authorization': Bearer ${token},
//           },
//         });

//         if (!response.ok) {
//           throw new Error('Failed to fetch sectors');
//         }

//         const data = await response.json();
//         if (data?.data) {
//           const filteredSectors = data.data.filter((sector) => sector.name !== 'Annual Report');
//           setSectors(filteredSectors);
//         } else {
//           console.error('No sectors found');
//         }
//       } catch (error) {
//         console.error('Error fetching sectors:', error);
//       } finally {
//         setLoadingSectors(false);
//       }
//     };
//     fetchSectors();
//   }
// }, [token]);

 // Fetch sub-sectors based on selected sector
//  useEffect(() => {
//   if (token && selectedSector.length > 0) {
//     const fetchSubSectors = async () => {
//       setLoadingSubSectors(true);
//       try {
//         const sectorToFetch = selectedSector[0];  // Assuming selectedSector is an array and getting the first sector
//         const response = await fetch(https://api.fmb52.com/api/sub_sector?sector=${sectorToFetch}, {
//           method: 'GET',
//           headers: {
//             'Content-Type': 'application/json',
//             'Authorization': Bearer ${token},
//           },
//         });
    
//         if (!response.ok) {
//           throw new Error('Failed to fetch sub-sectors');
//         }
    
//         const data = await response.json();
//         console.log('Sub-sectors API response:', data);  // Log the full response for debugging
    
//         // Filter sub-sectors based on the selected sector
//         if (data?.data && Array.isArray(data.data)) {
//           const filteredSubSectors = data.data.filter(subSector => subSector.sector === sectorToFetch);
//           setSubSectors(filteredSubSectors);  // Set filtered sub-sectors
//         } else {
//           setSubSectors([]);  // In case 'data.data' is not valid
//         }
//       } catch (error) {
//         console.error('Error fetching sub-sectors:', error);
//         setSubSectors([]);  // Handle the error by clearing the sub-sectors
//       } finally {
//         setLoadingSubSectors(false);  // Reset loading state
//       }
//     };
    
//     fetchSubSectors();
//   } else {
//     setSubSectors([]);
//   }

// }, [token, selectedSector]);

// console.log("Sub sectors", subSectors)


// Fetch years
// useEffect(() => {
//   if (token) {
//     const fetchYears = async () => {
//       setLoadingYears(true);
//       try {
//         const response = await fetch('https://api.fmb52.com/api/year', {
//           method: 'GET',
//           headers: {
//             'Content-Type': 'application/json',
//             'Authorization': Bearer ${token},
//           },
//         });

//         if (!response.ok) {
//           throw new Error('Failed to fetch years');
//         }

//         const data = await response.json();
//         if (data?.data) {
//           setYears(data.data);
//           // Set the default year to the current year if available
//           const currentYear = data.data.find(year => year.is_current === '1');
//           if (currentYear) {
//             setSelectedYear(currentYear.year); // Set the current year as default
//           }
//         } else {
//           console.error('No years found');
//         }
//       } catch (error) {
//         console.error('Error fetching years:', error);
//       } finally {
//         setLoadingYears(false);
//       }
//     };
//     fetchYears();
//   }
// }, [token]);

  // Filter sub-sectors based on selected sector
  // const filteredSubSectors = subSectors.filter(subSector =>
  //   selectedSector.length === 0 || selectedSector.includes(subSector.sectorId)
  // );

  // const handleSectorChange = (event) => {
  //   setSelectedSector(Array.isArray(event.target.value) ? event.target.value : [event.target.value]);
  // };
  
  // const handleSubSectorChange = (event) => {
  //   setSelectedSubSector(Array.isArray(event.target.value) ? event.target.value : [event.target.value]);
  // };
  
  // const handleYearChange = (event) => {
  //   setSelectedYear(Array.isArray(event.target.value) ? event.target.value : [event.target.value]);
  // };



           {/* <MultipleSelect
        label="Select Sector"
        inputLabel="Sector"
        options={sectors}  // Passing the fetched sectors as options
        value={selectedSector}  // Bind the selected value here
        onChange={handleSectorChange}  // Handle sector selection
      />
              <MultipleSelect
                label="Select Sub-Sector"
                inputLabel="Select Sub-Sector"
                options={subSectors}
                value={selectedSubSector}
                onChange={handleSubSectorChange}
                disabled={selectedSector.length === 0}
              />
             <MultipleSelect
                label="Select Year"
                inputLabel="Select Year"
                options={years}
                value={selectedYear}
                onChange={handleYearChange}
              /> */}




              <FormControl sx={{ m: 1, width: { xs: '100%', sm: '22ch', md: '25ch' }, position: 'relative' }}>
  <InputLabel id="sector-select-label">Select Sector</InputLabel>
  <Select
    label="Select Sector"
    labelId="sector-select-label"
    multiple
    value={selectedSector}
    onChange={handleSectorChange}
    input={<OutlinedInput label="Sector" />}
    renderValue={(selected) =>
      selected.length
        ? selected.map((sectorId) => {
            const sector = sectors.find((s) => s.id === sectorId);  // Find sector by ID
            return (
              <Box
                key={sectorId}
                sx={{
                  display: 'inline-flex',
                  alignItems: 'center',
                  background: '#ddd',
                  px: 1,
                  py: 0.5,
                  borderRadius: 1,
                  m: 0.3,
                  fontSize: '0.85rem', // Adjust font size
                  fontWeight: 'bold', // Optional for better styling
                }}
              >
                {sector?.name}  {/* Display sector name */}
                <IconButton
                  size="small"
                  onMouseDown={(e) => {
                    e.stopPropagation(); // Prevent dropdown from opening
                  }}
                  onClick={(e) => {
                    setSelectedSector((prev) => {
                      const updatedSectors = prev.filter((item) => item !== sectorId);

                      // Remove sub-sectors associated with the removed sector
                      setSelectedSubSector((subPrev) =>
                        subPrev.filter((subItem) =>
                          !subSectors.some(
                            (subSector) =>
                              subSector.name === subItem && subSector.sector === sectorId
                          )
                        )
                      );

                      return updatedSectors;
                    });
                  }}
                  sx={{
                    ml: 0.5,
                    width: '20px', // Set a fixed width
                    height: '20px', // Set a fixed height
                    color: '#555', // Optional for color consistency
                    borderRadius: '50%',
                    '&:hover': {
                      background: 'transparent', // Remove hover background
                    },
                  }}
                >
                  <CloseIcon fontSize="small" />
                </IconButton>
              </Box>
            );
          })
        : 'Select Sector'
    }
  >
    <MenuItem value="all">All</MenuItem>
    {sectors.map((sector) => (
      <MenuItem key={sector.id} value={sector.id}> {/* Use sector ID here */}
        {sector.name}
      </MenuItem>
    ))}
  </Select>
  {selectedSector.length > 0 && (
    <IconButton
      size="small"
      onMouseDown={(e) => {
        e.stopPropagation(); // Prevent dropdown from opening
      }}
      onClick={() => {
        setSelectedSector([]); // Clear all sectors
        setSelectedSubSector([]); // Clear all sub-sectors
      }}
      sx={{
        position: 'absolute',
        top: '6px',
        right: '30px',
        zIndex: 10,
        background: '#fff',
        '&:hover': {
          background: '#f5f5f5',
        },
      }}
    >
      <CloseIcon />
    </IconButton>
  )}
</FormControl>





import React, { useState, useEffect, useRef } from "react";
import {
  Box,
  TextField,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableRow,
  Paper,
  InputAdornment,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  IconButton,
  CssBaseline,
  Chip,
  ListSubheader,
  Tooltip
} from "@mui/material";
import CheckCircleOutlineIcon from "@mui/icons-material/CheckCircleOutline";
import CalendarTodayIcon from "@mui/icons-material/CalendarToday";
import AppTheme from "../../styles/AppTheme";
import { yellow , brown} from "../../styles/ThemePrimitives";
import divider from '../../assets/divider.png';
import {useUser} from '../../UserContext';
import CancelIcon from "@mui/icons-material/Cancel";;


const permissionNameMap = {
  "mumeneen.create": "Create Mumeneen",
  "mumeneen.edit": "Edit Mumeneen",
  "mumeneen.view": "View Mumeneen",
  "mumeneen.view_global": "View All Mumeneen",
  "mumeneen.delete": "Delete Mumeneen",
  "mumeneen.export": "Export Mumeneen",
  "mumeneen.print": "Print Mumeneen",

  "hub.create": "Create Hub",
  "hub.edit": "Edit Hub",
  "hub.view": "View Hub",
  "hub.view_global": "View All Hub",
  "hub.delete": "Delete Hub",
  "hub.export": "Export Hub",
  "hub.print": "Print Hub",

  "receipts.create": "Create Receipts",
  "receipts.edit": "Edit Receipts",
  "receipts.view": "View Receipts",
  "receipts.view_global": "View All Receipts",
  "receipts.delete": "Delete Receipts",
  "receipts.export": "Export Receipts",
  "receipts.print": "Print Receipts",

  "payments.create": "Create Payment",
  "payments.edit": "Edit Payment",
  "payments.view": "View Payment",
  "payments.view_global": "View All Payments",
  "payments.delete": "Delete Payment",
  "payments.export": "Export Payments",
  "payments.print": "Print Payments",

  "menu.create": "Create Menu",
  "menu.edit": "Edit Menu",
  "menu.view": "View Menu",
  "menu.view_global": "View All Menu",
  "menu.delete": "Delete Menu",
  "menu.export": "Export Menu",
  "menu.print": "Print Menu",

  "sector.create": "Create Sector",
  "sector.edit": "Edit Sector",
  "sector.view": "View Sectors",
  "sector.view_global": "View All Sectors",
  "sector.delete": "Delete Sectors",
  "sector.export": "Export Sectors",
  "sector.print": "Print Sectors",

  "sub_sector.create": "Create Sub-Sector",
  "sub_sector.edit": "Edit Sub-Sector",
  "sub_sector.view": "View Sub-Sectors",
  "sub_sector.view_global": "View All Sub-Sectors",
  "sub_sector.delete": "Delete Sub-Sectors",
  "sub_sector.export": "Export Sub-Sectors",
  "sub_sector.print": "Print Sub-Sectors",

  "expense.create": "Create Expense",
  "expense.edit": "Edit Expense",
  "expense.view": "View Expenses",
  "expense.view_global": "View All Expenses",
  "expense.delete": "Delete Expenses",
  "expense.export": "Export Expenses",
  "expense.print": "Print Expenses",

  "transfer.create": "Create Transfer",
  "transfer.edit": "Edit Transfer",
  "transfer.view": "View Transfers",
  "transfer.view_global": "View All Transfers",
  "transfer.delete": "Delete Transfers",
  "transfer.export": "Export Transfers",
  "transfer.print": "Print Transfers",

  "notifications.create": "Create Notifications",
  "notifications.edit": "Edit Notifications",
  "notifications.view": "View Notifications",
  "notifications.view_global": "View All Notifications",
  "notifications.delete": "Delete Notifications",
  "notifications.export": "Export Notifications",
  "notifications.print": "Print Notifications",

  "dashboard_widgets.create": "Create Dashboard-Widgets",
  "dashboard_widgets.edit": "Edit Dashboard-Widgets",
  "dashboard_widgets.view": "View Dashboard-Widgets",
  "dashboard_widgets.view_global": "View All Dashboard-Widgets",
  "dashboard_widgets.delete": "Delete Dashboard-Widgets",
  "dashboard_widgets.export": "Export Dashboard-Widgets",
  "dashboard_widgets.print": "Print Dashboard-Widgets",

  "feedback.create": "Create Feedback",
  "feedback.edit": "Edit Feedback",
  "feedback.view": "View Feedback",
  "feedback.view_global": "View All Feedbacks",
  "feedback.delete": "Delete Feedback",
  "feedback.export": "Export Feedback",
  "feedback.print": "Print Feedback",

  "mumin.view": "View Mumin",


};

export default function UserAccess() {
  // const [roles, setRoles] = useState("");
  // const [rolesList, setRolesList] = useState([]); // State for roles from API
  const {token} = useUser();
  // const [modules, setModules] = useState("");
// State for sector selection and sector list
// const [selectedSectors, setSelectedSectors] = useState("");
 // State for sector selection and sector list
 const [roles, setRoles] = useState(""); // Selected Role
 const [roleList, setRoleList] = useState([]); // Roles fetched from API
 const [modules, setModules] = useState([]); // Selected Modules (multiple)

 const [selectedSectors, setSelectedSectors] = useState([]); // Array for multi-select
 const [selectedSubSector, setSelectedSubSector] = useState([]); // Array for multi-select
 const [sectorList, setSectorList] = useState([]); // For storing API data
 const [subSectorList, setSubSectorList] = useState([]);
 const [filteredSubSectors, setFilteredSubSectors] = useState([]);

 const handleSectorChange = (event) => {
   const { value } = event.target;
   setSelectedSectors(typeof value === "string" ? value.split(",") : value);
 };

 const handleSubSectorChange = (event) => {
   const { value } = event.target;
   setSelectedSubSector(typeof value === "string" ? value.split(",") : value);
 };

 const handleDeleteSector = (event, sectorToDelete) => {
   event.stopPropagation();
   setSelectedSectors((prev) => prev.filter((sector) => sector !== sectorToDelete));
 };

 const handleDeleteSubSector = (event, subSectorToDelete) => {
   event.stopPropagation();
   setSelectedSubSector((prev) => prev.filter((subSector) => subSector !== subSectorToDelete));
 };
  // const handleSectorChange = (event) => setSector(event.target.value);


  // const handleRoleChange = (event) => setRoles(event.target.value);
  const handleModuleChange = (event) => {
    const { value } = event.target;
    setModules(typeof value === "string" ? value.split(",") : value);
  };

  // const handleSubSectorChange = (event) => setSelectedSubSector(event.target.value);
  const [permissions, setPermissions] = useState([]); // Permissions for a Rol

  const handleRoleChange = (event) => setRoles(event.target.value);
  const [validityDate, setValidityDate] = useState(""); // Initially empty
  const today = new Date().toISOString().split("T")[0]; // Get today's date in YYYY-MM-DD format
  const inputRef = useRef(null); // Create a ref for the input element

  const handleValidityChange = (event) => {
    setValidityDate(event.target.value); // Update the state when the user selects a date
  };

  const handleTextFieldClick = () => {
    if (inputRef.current) {
      inputRef.current.showPicker(); // Use the `showPicker()` method when the user clicks anywhere in the field
    }
  };


// Fetch roles from /api/roles/all
useEffect(() => {
  const fetchRoles = async () => {
    try {
      const response = await fetch("https://api.fmb52.com/api/roles/all", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });
      if (!response.ok) throw new Error("Failed to fetch roles");
      const data = await response.json();
      setRoleList(data.roles || []); // Assuming "roles" array is returned
    } catch (error) {
      console.error("Error fetching roles:", error);
    }
  };

  fetchRoles();
}, [token]);

// // Fetch permissions when a role is selected
// useEffect(() => {
//   if (!roles) return; // Only fetch if a role is selected

//   const fetchPermissions = async () => {
//     try {
//       const response = await fetch(`https://api.fmb52.com/api/roles/${roles}/permissions`, {
//         method: "GET",
//         headers: {
//           Authorization: `Bearer ${token}`,
//           "Content-Type": "application/json",
//         },
//       });
//       if (!response.ok) throw new Error("Failed to fetch permissions");
//       const data = await response.json();
//       setPermissions(data.permissions || []); // Store permissions
//     } catch (error) {
//       console.error("Error fetching permissions:", error);
//     }
//   };

//   fetchPermissions();
// }, [roles, token]);

// Fetch permissions when a role is selected
useEffect(() => {

  const fetchPermissions = async () => {
    try {
      const response = await fetch(`https://api.fmb52.com/api/permissions/all`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });
      if (!response.ok) throw new Error("Failed to fetch permissions");
      const data = await response.json();
      setPermissions(data.permissions || []); // Store permissions
    } catch (error) {
      console.error("Error fetching permissions:", error);
    }
  };

  fetchPermissions();
}, [token]);


// Fetch sectors from API
useEffect(() => {
  const fetchSectors = async () => {
    try {
      const response = await fetch("https://api.fmb52.com/api/sector", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) throw new Error("Failed to fetch sectors");

      const data = await response.json();
      setSectorList(data.data || []);
    } catch (error) {
      console.error("Error fetching sectors:", error);
    }
  };

  fetchSectors();
}, [token]);

 // Fetch sub-sectors from API
 useEffect(() => {
  const fetchSubSectors = async () => {
    try {
      const response = await fetch("https://api.fmb52.com/api/sub_sector", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) throw new Error("Failed to fetch sub-sectors");

      const data = await response.json();
      setSubSectorList(data.data || []);
    } catch (error) {
      console.error("Error fetching sub-sectors:", error);
    }
  };

  fetchSubSectors();
}, [token]);

  // Filter sub-sectors based on selected sectors
  useEffect(() => {
    const filtered = subSectorList.filter((subSector) =>
      selectedSectors.includes(subSector.sector_name)
    );
    setFilteredSubSectors(filtered);
    setSelectedSubSector([]); // Clear sub-sector selection when sector changes
  }, [selectedSectors, subSectorList]);




  return (
    <AppTheme>
      <CssBaseline />
      <Box
      sx={{
        // maxWidth: 900,
        pt: 3,
        pb: 3,
        mb: 3,
        mt: 20,
        pl: 3,
        pr: 3,
        mr: 3,
        ml: 3,
        // margin: "auto",
        // padding: 4,
        backgroundColor: "#fff",
        border: "1px solid #F4EBD0",
        borderRadius: 2,
        boxShadow: 1,
      }}
    >
      {/* Header */}
      <Typography
        variant="h6"
        sx={{
          fontWeight: "bold",
          marginBottom: 1,
          // backgroundColor: "#F9F6E9",
          padding: "8px 16px",
          borderRadius: 1,
        }}
      >
        User Access Details
      </Typography>
      <Box
         sx={{
          width: 'calc(100% + 48px)', // Add the parent's padding back
           position: 'relative',
           height: {
             xs: 10, // Height for extra-small screens
             sm: 15, // Height for small screens
             md: 15, // Height for medium screens
             lg: 15, // Height for large screens
             xl: 15, // Height for extra-large screens
           },
           backgroundImage: `url(${divider})`, // Replace with your image path
           backgroundSize: 'contain', // Ensure the divider image scales correctly
           backgroundRepeat: 'repeat-x', // Repeat horizontally
           backgroundPosition: 'center',
          //  my: { xs: 1.5, sm: 2, md: 2.5 }, // Vertical margin adjusted for different screen sizes
          mb: 2,
           marginLeft: '-24px', // Adjust to counter the container padding/margins
           marginRight: '-24px', // Adjust symmetrically
         }}
       />
      {/* Table Layout */}
      <TableContainer component={Paper} sx={{border: `1px solid ${yellow[300]}`,}} elevation={0}>
        <Table sx={{ minWidth: 650, }} aria-label="user access table">
          <TableBody>
            {/* ITS ID */}
            <TableRow>
  <TableCell
    sx={{
      fontWeight: "bold",
      backgroundColor: yellow[300],
      color: "white",
      width: "20%",
    }}
  >
    User ITS Id:
  </TableCell>
  <TableCell
    sx={{
      // border: `1px solid ${yellow[300]}`,
      display: "flex", // Align items in a row
      alignItems: "center", // Align vertically centered
      justifyContent: "space-between", // Space between TextField and Name
      gap: 2, // Add spacing between elements
    }}
  >
    {/* TextField */}
    <TextField
      variant="outlined"
      size="small"
      defaultValue="40452043"
      sx={{
        width: "40%",
        border: `1px solid ${yellow[300]}`,
        borderRadius: "8px",
      }}
    />

    {/* Name and Green Checkmark */}
    <Box
      sx={{
        display: "flex",
        alignItems: "center",
        gap: 1, // Space between checkmark and text
        color: "green",
        fontWeight: 600,
        fontSize: "0.9rem",
        whiteSpace: "nowrap", // Prevent line break
      }}
    >
      <CheckCircleOutlineIcon sx={{ color: "green" }} />
      <Typography sx={{ color: "green" }}>
        Burhanuddin Bhai Hatim Bhai Kanchwala ( Kolkata )
      </Typography>
    </Box>
  </TableCell>
</TableRow>


            {/* Validity */}
            <TableRow>
              <TableCell
                sx={{
                  fontWeight: "bold",
                  backgroundColor: yellow[300],
                  color: "white",
                }}
              >
                Validity of User:
              </TableCell>
              <TableCell sx={{
                borderTop: `1px solid ${yellow[300]}`,
                borderBottom: `1px solid ${yellow[300]}`,
              }}>
             <TextField
      type="date" // Use the date input type
      variant="outlined"
      size="small"
      value={validityDate} // Bind to state
      onChange={handleValidityChange} // Handle changes
      inputRef={inputRef} // Attach the ref to the input element
      onClick={handleTextFieldClick} // Open the calendar when the field is clicked
      min={today} // Set the minimum date to today
      sx={{
        width: "40%",
        border: `1px solid ${yellow[300]}`,
        borderRadius: "8px",
      }}
    />

              </TableCell>
            </TableRow>

            {/* Assign Roles */}
            <TableRow>
              <TableCell
                sx={{
                  fontWeight: "bold",
                  backgroundColor: yellow[300],
                  color: "white",
                }}
              >
                Assign Roles:
              </TableCell>
              {/* <TableCell
                  sx={{
                    borderTop: `1px solid ${yellow[300]}`,
                    borderBottom: `1px solid ${yellow[300]}`,
                  }}
                >
                  <FormControl size="small" sx={{ width: "40%" }}>
                    <InputLabel>Select Role</InputLabel>
                    <Select
                      value={roles}
                      onChange={handleRoleChange}
                      label="Select Role"
                      sx={{
                        border: `1px solid ${yellow[300]}`,
                        borderRadius: "8px",
                      }}
                    >
                      <MenuItem value="">None</MenuItem>
                      {permissions.map((permission) => (
                        <MenuItem key={permission.id} value={permission.name}>
                          {permission.name}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </TableCell> */}

<TableCell                   sx={{
                    borderTop: `1px solid ${yellow[300]}`,
                    borderBottom: `1px solid ${yellow[300]}`,
                  }}>
                  <FormControl size="small" sx={{ width: "40%" }}>
                    <InputLabel>Select Role</InputLabel>
                    <Select
                      value={roles}
                      onChange={(e) => setRoles(e.target.value)} // Update selected role
                      label="Select Role"
                      sx={{
                        border: `1px solid ${yellow[300]}`,
                        borderRadius: "8px",
                      }}
                    >
                      <MenuItem value="">None</MenuItem>
                      {roleList.map((role) => (
                        <MenuItem key={role.id} value={role.id}>
                          {role.name}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </TableCell>
            </TableRow>

            {/* Assign Modules */}
            <TableRow>
              <TableCell
                sx={{
                  fontWeight: "bold",
                  backgroundColor: yellow[300],
                  color: "white",
                }}
              >
                Assign Modules:
              </TableCell>
              {/* <TableCell sx={{
                borderTop: `1px solid ${yellow[300]}`,
                borderBottom: `1px solid ${yellow[300]}`,
              }}>
                <FormControl size="small" sx={{width: '40%'}}>
                  <InputLabel>Select From List</InputLabel>
                  <Select
                    value={modules}
                    onChange={handleModuleChange}
                    label="Select From List"
                    sx={{
                      border: `1px solid ${yellow[300]}`,
                      borderRadius: '8px'
                    }}
                  >
                    <MenuItem value="">None</MenuItem>
                    <MenuItem value="Sales">Sales</MenuItem>
                    <MenuItem value="Inventory">Inventory</MenuItem>
                    <MenuItem value="Finance">Finance</MenuItem>
                  </Select>
                </FormControl>
              </TableCell> */}
              <TableCell sx={{
                    borderTop: `1px solid ${yellow[300]}`,
                    borderBottom: `1px solid ${yellow[300]}`,
                  }}>
                  <FormControl size="small" sx={{ width: "40%" }}>
                    <InputLabel>Select Module</InputLabel>
                    {/* <Select
                      value={modules}
                      onChange={(e) => setModules(e.target.value)} // Update selected module
                      label="Select Module"
                      sx={{
                        border: `1px solid ${yellow[300]}`,
                        borderRadius: "8px",
                      }}
                    >
                      <MenuItem value="">None</MenuItem>
                      {permissions.map((permission) => (
                        <MenuItem key={permission.id} value={permission.name}>
                          {permissionNameMap[permission.name] || permission.name}
                        </MenuItem>
                      ))}
                    </Select> */}
 <Select
    multiple
    value={modules}
    onChange={handleModuleChange}
    renderValue={(selected) => {
      const displayedItems = selected.slice(0, 2); // Show only the first 2 items
      const hiddenItems = selected.slice(2); // Hidden items for +N more
      const moreCount = hiddenItems.length;

      return (
        <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
          {displayedItems.map((value) => (
            <Chip
              key={value}
              label={permissionNameMap[value] || value}
              onMouseDown={(e) => e.stopPropagation()}
              onDelete={(event) =>
                setModules((prev) => prev.filter((module) => module !== value))
              }
              deleteIcon={<CancelIcon />}
            />
          ))}
         {moreCount > 0 && (
            <Tooltip
              title={
                <Box sx={{ display: "flex", flexDirection: "column" }}>
                  {hiddenItems.map((value) => (
                    <Box key={value}>{permissionNameMap[value] || value}</Box>
                  ))}
                </Box>
              }
              arrow
            >
              <Chip
                label={`+${moreCount} more`}
                sx={{
                  backgroundColor: "#f5f5f5",
                  cursor: "pointer",
                }}
              />
            </Tooltip>
          )}
        </Box>
      );
    }}
    sx={{ border: "1px solid #F4EBD0", borderRadius: "8px" }}
    MenuProps={{
      PaperProps: {
        style: {
          maxHeight: 300,
          width: 300,
        },
      },
    }}
  >
    {Object.entries(permissionNameMap).map(([key, label]) => (
      <MenuItem key={key} value={key}>
        <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
          <input
            type="checkbox"
            checked={modules.includes(key)}
            onChange={() => {
              setModules((prev) =>
                prev.includes(key)
                  ? prev.filter((module) => module !== key)
                  : [...prev, key]
              );
            }}
          />
          {label}
        </Box>
      </MenuItem>
    ))}
  </Select>
                  </FormControl>
                </TableCell>
            </TableRow>

            {/* Sector */}
            <TableRow>
              <TableCell
                sx={{
                  fontWeight: "bold",
                  backgroundColor: yellow[300],
                  color: "white",
                }}
              >
                Sector:
              </TableCell>
              <TableCell sx={{
                borderTop: `1px solid ${yellow[300]}`,
                borderBottom: `1px solid ${yellow[300]}`,
              }}>
                <FormControl size="small" sx={{width: '40%'}}>
                <InputLabel>Select Sectors</InputLabel>
                            <Select
            multiple
            value={selectedSectors}
            onChange={handleSectorChange}
            renderValue={(selected) => (
              <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
                {selected.map((value) => (
                  <Chip
                    key={value}
                    label={value}
                    onMouseDown={(e) => e.stopPropagation()}
                    onDelete={(event) => handleDeleteSector(event, value)}
                    deleteIcon={<CancelIcon />}
                  />
                ))}
              </Box>
            )}
            sx={{ border: "1px solid #F4EBD0", borderRadius: "8px" }}
          >
            {sectorList.map((sectorItem) => (
              <MenuItem key={sectorItem.id} value={sectorItem.name}>
                {sectorItem.name}
              </MenuItem>
            ))}
          </Select>
                </FormControl>
              </TableCell>
            </TableRow>

            {/* Sub-Sector */}
            <TableRow>
              <TableCell
                sx={{
                  fontWeight: "bold",
                  backgroundColor: yellow[300],
                  color: "white",
                }}
              >
                Sub - Sector:
              </TableCell>
              <TableCell sx={{
                borderTop: `1px solid ${yellow[300]}`,
                // borderBottom: `1px solid ${yellow[300]}`,
              }}>
                <FormControl size="small" sx={{width: '40%'}}>
                <InputLabel>Select Sub-Sector</InputLabel>
                <Select
            multiple
            value={selectedSubSector}
            onChange={handleSubSectorChange}
            renderValue={(selected) => (
              <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
                {selected.map((value) => (
                  <Chip
                    key={value}
                    label={value}
                    onMouseDown={(e) => e.stopPropagation()}
                    onDelete={(event) => handleDeleteSubSector(event, value)}
                    deleteIcon={<CancelIcon />}
                  />
                ))}
              </Box>
            )}
            sx={{ border: "1px solid #F4EBD0", borderRadius: "8px" }}
            MenuProps={{
              PaperProps: {
                style: {
                  maxHeight: 200,
                  width: 250,
                },
              },
            }}
          >
            {selectedSectors.reduce((acc, sectorName) => {
              const sectorSubSectors = filteredSubSectors.filter(
                (subSector) => subSector.sector_name === sectorName
              );
              return acc.concat(
                <ListSubheader
                  key={sectorName}
                  sx={{
                    fontWeight: "bold",
                    position: "sticky",
                    top: 0,
                    backgroundColor: yellow[100],
                    zIndex: 1,
                  }}
                >
                  {sectorName}
                </ListSubheader>,
                sectorSubSectors.map((subSector) => (
                  <MenuItem key={subSector.id} value={subSector.sub_sector_name}>
                    {subSector.sub_sector_name}
                  </MenuItem>
                ))
              );
            }, [])}
          </Select>
                </FormControl>
              </TableCell>
            </TableRow>
          </TableBody>
        </Table>
      </TableContainer>
    </Box>
    </AppTheme>
  );
}

 // <Card
    //   sx={{
    //     minWidth: { xs: 250, sm: 350, md: 500 },
    //     width: '100%',
    //     boxShadow: 3,
    //     // height: 500,
    //     display: 'flex',
    //     flexDirection: 'column',
    //     justifyContent: 'space-between',
    //     borderRadius: 2,
    //     padding: { xs: 2, sm: 3 },
    //     backgroundColor: '#FAFAFA', // Subtle background color
    //   }}
    // >
    //   <Grid container rowSpacing={2} sx={{ width: '100%' }}>
    //     {/* Header with Refresh Button */}
    //     <Box
    //     sx={{
    //       display: 'flex',
    //       justifyContent: 'space-between',
    //       alignItems: 'center',
    //       width: '100%',
    //       paddingBottom: 1
    //     }}
    //   >
    //      <Typography variant="h6">Mumeneen Stats</Typography>
    //     <Button
    //       variant="outlined"
    //       color="primary"
    //       onClick={fetchMumeneenStats}
    //       disabled={loading}
    //       sx={{ borderRadius: 2, padding: '8px' }}
    //     >
    //       {loading ? <CircularProgress size={20} color="inherit" /> : <RefreshIcon />}
    //     </Button>
    //   </Box>
    //     {/* Full-width Divider */}
    //     <Box
    //     sx={{
    //       width: '100%',
    //       height: '10px',
    //       backgroundImage: `url(${divider})`,
    //       backgroundRepeat: 'repeat-x',
    //       backgroundPosition: 'center',
    //       backgroundSize: 'contain',
    //     }}
    //   />

    //     {/* Cards Section */}
    //     {[
    //       { icon: <GroupsIcon />, label: 'Total Members', value: mumeneenStats.total_users, color: yellowHierarchy[3]  },
    //       { icon: <PersonOutlineIcon />, label: 'Total HOF', value: mumeneenStats.total_hof, color: '#FFFDE7' },
    //       { icon: <PeopleIcon />, label: 'Total Family Members', value: mumeneenStats.total_fm, color: yellowHierarchy[3] },
    //       { icon: <ManIcon />, label: 'Total Males', value: mumeneenStats.total_males, color:  '#FFFDE7' },
    //       { icon: <WomanIcon />, label: 'Total Females', value: mumeneenStats.total_females, color:  yellowHierarchy[3] },
    //       { icon: <ChildCareIcon />, label: 'Total Children', value: mumeneenStats.total_children, color:  '#FFFDE7' },
    //       { icon: <HouseIcon />, label: 'Total Houses', value: mumeneenStats.total_houses, color: yellowHierarchy[3] },
    //       { icon: <ApartmentIcon />, label: 'Total Sectors', value: '20', color: '#FFFDE7' },
    //       { icon: <BusinessIcon />, label: 'Total Sub-Sectors', value: '20', color: yellowHierarchy[3] },
    //     ].map((stat, index) => (
    //       <Grid item xs={12} sm={4} key={index}>
    //         <Card
    //           sx={{
    //             display: 'flex',
    //             flexDirection: 'column',
    //             height: '100%',
    //             padding: 1,
    //             margin: 1,
    //             boxShadow: 2,
    //             justifyContent: 'center',
    //             borderRadius: 2,
    //             backgroundColor: stat.color,
    //             transition: 'transform 0.3s, box-shadow 0.3s',
    //             '&:hover': {
    //               transform: 'scale(1.05)',
    //               boxShadow: 4,
    //             },
    //           }}
    //         >
    //           <CardContent sx={{ textAlign: 'center' }}>
    //             <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', marginBottom: 1, color: '#4E342E' }}>
    //               {stat.icon}
    //             </Box>
    //             <Typography sx={{ fontSize: 14, fontWeight: 600, color: brown[700] }}>
    //               {stat.label}
    //             </Typography>
    //             <Typography variant="h5" sx={{ fontWeight: 700, color: yellow[400] }}>
    //               {stat.value}
    //             </Typography>
    //           </CardContent>
    //         </Card>
    //       </Grid>
    //     ))}
    //   </Grid>
    // </Card>


    

     // const ActionButtonWithOptions = ({ onActionClick }) => {
  //   const [flipped, setFlipped] = useState(false);

  //   const handleClick = () => {
  //     setFlipped((prev) => !prev); // Toggle flip state
  //   };

  //   return (
  //     <Box
  //       sx={{
  //         position: 'relative',
  //         width: '120px',
  //         height: '36px',
  //         perspective: '1000px', // For flip effect
  //       }}
  //     >
  //       <Box
  //         sx={{
  //           position: 'absolute',
  //           top: 0,
  //           left: 0,
  //           width: '100%',
  //           height: '100%',
  //           transformStyle: 'preserve-3d',
  //           transform: flipped ? 'rotateY(180deg)' : 'rotateY(0deg)', // Flip effect
  //           transition: 'transform 0.6s',
  //         }}
  //       >
  //         {/* Front: Action Button (Visible when not flipped) */}
  //         {!flipped && (
  //           <Box
  //             sx={{
  //               width: '100%',
  //               height: '100%',
  //               display: 'flex',
  //               justifyContent: 'center',
  //               alignItems: 'center',
  //               backgroundColor: brown[700],
  //               color: 'white',
  //               fontSize: '14px',
  //               textTransform: 'none',
  //               borderRadius: '4px',
  //               '&:hover': {
  //                 backgroundColor: brown[800],
  //               },
  //               cursor: 'pointer',
  //             }}
  //             onClick={handleClick}
  //           >
  //             Actions
  //           </Box>
  //         )}

  //         {/* Back: Options when flipped */}
  //         {flipped && (
  //           <Box
  //             sx={{
  //               width: '100%',
  //               height: 'auto',
  //               // backgroundColor: yellow[300],
  //               color: brown[700],
  //               display: 'flex',
  //               flexDirection: 'row',  // Stack buttons vertically
  //               justifyContent: 'center', // Align to the top
  //               alignItems: 'center',
  //               // padding: '3px',
  //               borderRadius: '4px',
  //               transform: 'rotateY(180deg)', // Back side of flip
  //               gap: 1
  //             }}
  //           >
  //             {/* <Button sx={{ fontSize: '12px', padding: '3px' }} onClick={() => onActionClick('View Profile')}>
  //             View Profile
  //           </Button>
  //           <Button sx={{ fontSize: '12px', padding: '3px' }} onClick={() => onActionClick('Add Receipt')}>
  //             Add Receipt
  //           </Button>
  //           <Button sx={{ fontSize: '12px', padding: '3px' }} onClick={() => onActionClick('Edit Hub')}>
  //             Edit Hub
  //           </Button>
  //           <Button sx={{ fontSize: '12px', padding: '3px' }} onClick={() => onActionClick('Transfer')}>
  //             Transfer
  //           </Button> */}
  //             <Tooltip title="View Profile" placement="top">
  //               <IconButton
  //                 sx={{ fontSize: '20px', marginBottom: '5px' }}
  //                 onClick={() => onActionClick('View Profile')}
  //               >
  //                 <AccountCircleIcon sx={{ color: brown[700] }} />
  //               </IconButton>
  //             </Tooltip>

  //             <Tooltip title="Add Receipt" placement="bottom">
  //               <IconButton
  //                 sx={{ fontSize: '20px', marginBottom: '5px' }}
  //                 onClick={handleReceiptDialogOpen}
  //               >
  //                 <ReceiptIcon sx={{ color: brown[700] }} />
  //               </IconButton>
  //             </Tooltip>

  //             <Tooltip title="Edit Hub" placement="top">
  //               <IconButton
  //                 sx={{ fontSize: '20px', marginBottom: '5px' }}
  //                 onClick={handleHubDialogOpen}
  //               >
  //                 <EditIcon sx={{ color: brown[700] }} />
  //               </IconButton>
  //             </Tooltip>

  //             <Tooltip title="Transfer" placement="bottom">
  //               <IconButton
  //                 sx={{ fontSize: '20px', marginBottom: '5px' }}
  //                 onClick={() => onActionClick('Transfer')}
  //               >
  //                 <TransferWithinAStationIcon sx={{ color: brown[700] }} />
  //               </IconButton>
  //             </Tooltip>
  //           </Box>
  //         )}
  //       </Box>
  //     </Box>
  //   );
  // };


  <Dialog open={openFamilyDialog} onClose={handleFamilyDialogClose}>
  <DialogTitle>Add Family Details</DialogTitle>
  <DialogContent>
    <Typography variant="body1" marginBottom={2}>
      Please fill out the details below:
    </Typography>
    <TextField
      select
      label="HOF Prefix"
      name="hofPrefix"
      value={familyData.hofPrefix}
      onChange={handleInputChange}
      fullWidth
      margin="normal"
    >
      <MenuItem value="shaikh">Shaikh</MenuItem>
      <MenuItem value="mulla">Mulla</MenuItem>
      {/* <MenuItem value="Ms">Ms</MenuItem> */}
    </TextField>
    <TextField
      label="HOF Name"
      name="hofName"
      value={familyData.hofName}
      onChange={handleInputChange}
      fullWidth
      margin="normal"
    />
    <TextField
      label="HOF ITS"
      name="hofITS"
      value={familyData.hofITS}
      onChange={handleInputChange}
      fullWidth
      margin="normal"
    />
    <TextField
      select
      label="Sector"
      name="sector"
      value={familyData.sector}
      onChange={handleInputChange}
      fullWidth
      margin="normal"
    >
      <MenuItem value="Sector 1">Sector 1</MenuItem>
      <MenuItem value="Sector 2">Sector 2</MenuItem>
    </TextField>
    <TextField
      select
      label="Sub Sector"
      name="subSector"
      value={familyData.subSector}
      onChange={handleInputChange}
      fullWidth
      margin="normal"
    >
      <MenuItem value="Sub Sector A">Sub Sector A</MenuItem>
      <MenuItem value="Sub Sector B">Sub Sector B</MenuItem>
    </TextField>
    <TextField
      label="Folio No"
      name="folioNo"
      value={familyData.folioNo}
      onChange={handleInputChange}
      fullWidth
      margin="normal"
    />
    <TextField
      select
      label="Gender"
      name="gender"
      value={familyData.gender}
      onChange={handleInputChange}
      fullWidth
      margin="normal"
    >
      <MenuItem value="Male">Male</MenuItem>
      <MenuItem value="Female">Female</MenuItem>
    </TextField>
    <TextField
      label="HOF Mobile No"
      name="hofMobile"
      value={familyData.hofMobile}
      onChange={handleInputChange}
      fullWidth
      margin="normal"
    />
    <TextField
      label="Email"
      name="email"
      value={familyData.email}
      onChange={handleInputChange}
      fullWidth
      margin="normal"
    />
  </DialogContent>
  <DialogActions>
    <Button onClick={handleFamilyDialogClose} color="primary">
      Cancel
    </Button>
    <Button onClick={handleFormFamilySubmit} color="primary">
      Confirm
    </Button>
  </DialogActions>
</Dialog>

<Dialog open={openReceiptDialog} onClose={handleReceiptDialogClose} maxWidth="sm" fullWidth>
<DialogTitle>
  Add Receipt for {selectedPersonName || 'Selected Person'}
</DialogTitle>
<DialogContent>
  {/* Mode Dropdown */}
  <FormControl fullWidth margin="dense">
    <InputLabel>Mode</InputLabel>
    <Select
      name="mode"
      value={receiptData.mode}
      onChange={handleReceiptInputChange}
    >
      <MenuItem value="Cash">Cash</MenuItem>
      <MenuItem value="NEFT">NEFT</MenuItem>
      <MenuItem value="Online Payment">Online Payment</MenuItem>
      <MenuItem value="Cheque">Cheque</MenuItem>
    </Select>
  </FormControl>
  {/* Conditionally Rendered Fields */}
  {receiptData.mode === 'Cheque' && (
    <>
      <TextField
        margin="dense"
        label="Receipt Name"
        name="receiptName"
        fullWidth
        value={receiptData.receiptName}
        onChange={handleReceiptInputChange}
      />
      <TextField
        margin="dense"
        label="Bank Name"
        name="bankName"
        fullWidth
        value={receiptData.bankName}
        onChange={handleReceiptInputChange}
      />
      <TextField
        margin="dense"
        label="IFSC"
        name="ifsc"
        fullWidth
        value={receiptData.ifsc}
        onChange={handleReceiptInputChange}
      />
      <TextField
        margin="dense"
        label="Cheque No"
        name="chequeNo"
        fullWidth
        value={receiptData.chequeNo}
        onChange={handleReceiptInputChange}
      />
      <TextField
        margin="dense"
        label="Cheque Date"
        name="chequeDate"
        type="date"
        fullWidth
        InputLabelProps={{ shrink: true }}
        value={receiptData.chequeDate}
        onChange={handleReceiptInputChange}
      />
    </>
  )}

  {receiptData.mode === 'NEFT' && (
    <>
      <TextField
        margin="dense"
        label="Receipt Name"
        name="receiptName"
        fullWidth
        value={receiptData.receiptName}
        onChange={handleReceiptInputChange}
      />
      <TextField
        margin="dense"
        label="Transaction ID"
        name="transactionId"
        fullWidth
        value={receiptData.transactionId}
        onChange={handleReceiptInputChange}
      />
      <TextField
        margin="dense"
        label="Transaction Date"
        name="transactionDate"
        type="date"
        fullWidth
        InputLabelProps={{ shrink: true }}
        value={receiptData.transactionDate}
        onChange={handleReceiptInputChange}
      />
    </>
  )}

  {/* Other Fields */}
  <TextField
    margin="dense"
    label="Amount"
    name="amount"
    type="number"
    fullWidth
    value={receiptData.amount}
    onChange={handleReceiptInputChange}
    helperText={amountInWords || 'Enter amount in numbers'} // Shows amount in words
  />

  <TextField
    margin="dense"
    label="Comments"
    name="comments"
    multiline
    rows={3}
    fullWidth
    value={receiptData.comments}
    onChange={handleReceiptInputChange}
  />
</DialogContent>

<DialogActions>
  {/* Cancel Button with Red Border and Text */}
  <Button
    onClick={handleReceiptDialogClose}
    sx={{
      padding: '8px 16px',
      margin: 2,
      border: '2px solid #f44336', // Red border
      color: '#f44336', // Red text
      textTransform: 'none',
      '&:hover': {
        backgroundColor: '#ffebee', // Light red on hover
        borderColor: '#d32f2f',
      },
    }}
  >
    Cancel
  </Button>

  {/* Submit Button with Green Border and Text */}
  <Button
    onClick={handleReceiptFormSubmit}
    sx={{
      padding: '8px 16px',
      margin: 2,
      border: '2px solid #4caf50', // Green border
      color: '#4caf50', // Green text
      textTransform: 'none',
      '&:hover': {
        backgroundColor: '#e8f5e9', // Light green on hover
        borderColor: '#388e3c',
      },
    }}
  >
    Submit
  </Button>
</DialogActions>

</Dialog>


<Dialog
open={openHubDialog}
onClose={handleHubDialogClose}
maxWidth="md"
fullWidth
sx={{
  '& .MuiDialog-paper': {
    minHeight: '300px',
    padding: 2,
  },
}}
>
<DialogTitle>Edit Hub Details</DialogTitle>
<DialogContent>
  {/* User Details */}
  <Typography variant="body1" sx={{ marginBottom: 2 }}>
    <strong>Name:</strong> {selectedPersonName || 'N/A'}
  </Typography>
  <Typography variant="body1" sx={{ marginBottom: 2 }}>
    <strong>ITS:</strong> {selectedUserDetails.its || 'N/A'}
  </Typography>
  <Typography variant="body1" sx={{ marginBottom: 2 }}>
    <strong>Sector:</strong> {selectedUserDetails.sector} - {selectedUserDetails.subSector}
  </Typography>
  <Typography variant="body1" sx={{ marginBottom: 2 }}>
    <strong>Folio:</strong> {selectedUserDetails.folio}
  </Typography>
  <Typography variant="body1" sx={{ marginBottom: 2 }}>
    <strong>Year:</strong> {selectedUserDetails.year}
  </Typography>
  {console.log("hub amount", hubData.amount)}

  {/* Hub Amount Input */}
  <TextField
    margin="dense"
    label="Hub Amount"
    name="amount"
    type="number"
    fullWidth
    value={hubData.amount}
    onChange={handleHubInputChange}
    helperText={amountInWords || 'Enter amount in numbers'}
  />
</DialogContent>
<DialogActions>
  <Button
    onClick={handleHubDialogClose}
    sx={{
      padding: '8px 16px',
      margin: 2,
      border: '2px solid #f44336',
      color: '#f44336',
      textTransform: 'none',
      '&:hover': {
        backgroundColor: '#ffebee',
        borderColor: '#d32f2f',
      },
    }}
  >
    Cancel
  </Button>
  <Button
    onClick={handleHubFormSubmit}
    sx={{
      padding: '8px 16px',
      margin: 2,
      border: '2px solid #4caf50',
      color: '#4caf50',
      textTransform: 'none',
      '&:hover': {
        backgroundColor: '#e8f5e9',
        borderColor: '#388e3c',
      },
    }}
  >
    Confirm
  </Button>
</DialogActions>
</Dialog>



MumeneenTable

import React, { useEffect, useState } from 'react';
import { Box, Paper, TextField, Chip, Menu, MenuItem, Select, FormControl, InputLabel, Typography, IconButton, Button, CssBaseline } from '@mui/material';
import { DataGridPro, GridToolbar } from '@mui/x-data-grid-pro';
import { useNavigate } from 'react-router-dom';
import { useUser } from '../../UserContext';
import { Link } from 'react-router-dom';
import { yellow, brown } from '../../styles/ThemePrimitives';
import EditIcon from '@mui/icons-material/Edit';
import ReceiptIcon from '@mui/icons-material/Receipt';
import AccountCircleIcon from '@mui/icons-material/AccountCircle';
import TransferWithinAStationIcon from '@mui/icons-material/TransferWithinAStation';
import Tooltip from '@mui/material/Tooltip';
import AddCircleIcon from '@mui/icons-material/AddCircle';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogTitle from '@mui/material/DialogTitle';
import { useOutletContext } from "react-router-dom";
import MoreVertIcon from '@mui/icons-material/MoreVert'; // For "Actions" icon


import { Flip } from 'react-spring';
import AppTheme from '../../styles/AppTheme';

const customLocaleText = {
  noRowsLabel: 'Please wait....', // Remove the default "No rows" text
  noResultsOverlayLabel: '', // Remove default "No results" text for filtered data
};


function MumeneenTable() {
  const {
    selectedSector,
    selectedSubSector,
    selectedYear,
  } = useOutletContext();

  const { token, loading, currency } = useUser();
  // Convert the selected values into the appropriate format
  const year = selectedYear.length ? selectedYear[0] : "1445-1446"; // Default to "1445-1446" if no year selected
  const sector = selectedSector.length ? selectedSector : ["all"]; // Default to "all" if no sector selected
  const subSector = selectedSubSector.length ? selectedSubSector : ["all"]; // Default to "all" if no sub-sector selected
  const [selectedPersonName, setSelectedPersonName] = useState('');
  const [amountInWords, setAmountInWords] = useState('')
  const [rows, setRows] = useState([]);
  const [filterText, setFilterText] = useState('');
  const [sortModel, setSortModel] = useState([]);
  const [filterType, setFilterType] = useState('HOF');
  const [paginationModel, setPaginationModel] = useState({
    page: 0,
    pageSize: 10,
  });
  const [apiError, setApiError] = useState(null);
  const navigate = useNavigate();
  //Family Dialog
  const currencyCode = currency?.currency_code || 'INR'; // Default to INR
  const currencySymbol = currency?.currency_symbol || '₹'; // Default to ₹

  const formatCurrency = (value) => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: currencyCode,
    }).format(value || 0);
  };

  const [openFamilyDialog, setOpenFamilyDialog] = useState(false);
  const [familyData, setFamilyData] = useState({
    hofPrefix: '',
    hofName: '',
    hofITS: '',
    sector: '',
    subSector: '',
    folioNo: '',
    gender: '',
    hofMobile: '',
    email: '',
  });

  const handleAddFamilyClick = () => {
    setOpenFamilyDialog(true);
  };

  const handleFamilyDialogClose = () => {
    setOpenFamilyDialog(false);
    setFamilyData({
      hofPrefix: '',
      hofName: '',
      hofITS: '',
      sector: '',
      subSector: '',
      folioNo: '',
      gender: '',
      hofMobile: '',
      email: '',
    });
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFamilyData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleFormFamilySubmit = () => {
    console.log('Family Data:', familyData);
    handleFamilyDialogClose();
  };

  // const handleAddFamilyClick = () => {
  //   // Add functionality for adding a family
  //   navigate('/add-family'); // Example: Navigate to the page where you can add a new family
  // };

  //Add receipt dialog
  const [openReceiptDialog, setOpenReceiptDialog] = useState(false);
  const [receiptData, setReceiptData] = useState({
    mode: '',
    amount: '',
    comments: '',
    receiptName: '',
    bankName: '',
    ifsc: '',
    chequeNo: '',
    chequeDate: '',
    transactionId: '',
    transactionDate: '',
  });
  const handleReceiptDialogOpen = () => {
    setOpenReceiptDialog(true);
  };

  const handleReceiptDialogClose = () => {
    setOpenReceiptDialog(false);
    setReceiptData({
      mode: '',
      amount: '',
      comments: '',
      receiptName: '',
      bankName: '',
      ifsc: '',
      chequeNo: '',
      chequeDate: '',
      transactionId: '',
      transactionDate: '',
    });
    setAmountInWords('');
  };

  const handleReceiptInputChange = (e) => {
    const { name, value } = e.target;

    // Update receipt data
    setReceiptData((prev) => ({
      ...prev,
      [name]: value,
    }));

    // Convert amount to words
    if (name === 'amount') {
      setAmountInWords(numberToWords(value));
    }
  };


  const handleReceiptFormSubmit = () => {
    console.log('Receipt Data:', receiptData);
    handleReceiptDialogClose();
  };

  //Add hub dialog
  const [openHubDialog, setOpenHubDialog] = useState(false);
  const [hubData, setHubData] = useState({
    count: '',
  });
  const handleHubDialogOpen = () => {
    setOpenHubDialog(true);
  };
  const [selectedUserDetails, setSelectedUserDetails] = useState({
    its: '',
    sector: '',
    subSector: '',
    folio: '',
    year: '',
  });
  const handleHubDialogClose = () => {
    setOpenHubDialog(false);
    setHubData({ amount: '' }); // Reset the amount
    setAmountInWords('');       // Clear the number to words stat
  };
  const handleHubInputChange = (e) => {
    const { name, value } = e.target;
    setHubData((prev) => ({
      ...prev,
      [name]: value,

    }));
    // Convert amount to words
    if (name === 'amount') {
      setAmountInWords(numberToWords(value));
    }
  };
  const handleHubFormSubmit = () => {
    console.log('Hub Data:', hubData);
    handleHubDialogClose();
  };


  const ActionButtonWithOptions = ({ onActionClick, row }) => {
    const [anchorEl, setAnchorEl] = useState(null); // Anchor element for the dropdown menu
    const open = Boolean(anchorEl);

    // Open the menu
    const handleClick = (event) => {
      setAnchorEl(event.currentTarget);
    };

    // Close the menu
    const handleClose = () => {
      setAnchorEl(null);
    };

    const handleViewProfile = () => {
      navigate(`/mumeneen/${row.id}`); // Navigate to the Mumeneen Details page
      handleClose(); // Close the menu after navigation
    };

    return (
      <Box>
        {/* Actions Button */}
        <Button
          variant="contained"
          color="primary"
          onClick={handleClick}
        >
          Actions
          {/* <MoreVertIcon /> */}

        </Button>

        {/* Dropdown Menu */}
        <Menu
          anchorEl={anchorEl}
          open={open}
          onClose={handleClose}
          anchorOrigin={{
            vertical: 'bottom',
            horizontal: 'left',
          }}

          transformOrigin={{
            vertical: 'top',
            horizontal: 'left',
          }}
        >
          {/* View Profile Option */}
          <MenuItem onClick={handleViewProfile}>
            <Tooltip title="View Profile" placement="left">
              <Box display="flex" alignItems="center" gap={1} sx={{ pr: 2 }}>
                <AccountCircleIcon sx={{ color: brown[200] }} />
                View Profile
              </Box>
            </Tooltip>
          </MenuItem>

          {/* Add Receipt Option */}
          <MenuItem onClick={() => { onActionClick('Add Receipt'); handleClose(); }}>
            <Tooltip title="Add Receipt" placement="left">
              <Box display="flex" alignItems="center" gap={1} sx={{ pr: 2 }}>
                <ReceiptIcon sx={{ color: brown[200] }} />
                Add Receipt
              </Box>
            </Tooltip>
          </MenuItem>

          {/* Edit Hub Option */}
          <MenuItem onClick={() => { onActionClick('Edit Hub'); handleClose(); }}>
            <Tooltip title="Edit Hub" placement="left">
              <Box display="flex" alignItems="center" gap={1} sx={{ pr: 2 }}>
                <EditIcon sx={{ color: brown[200] }} />
                Edit Hub
              </Box>
            </Tooltip>
          </MenuItem>

          {/* Transfer Option */}
          <MenuItem onClick={() => { onActionClick('Transfer'); handleClose(); }}>
            <Tooltip title="Transfer" placement="left">
              <Box display="flex" alignItems="center" gap={1} sx={{ pr: 2 }}>
                <TransferWithinAStationIcon sx={{ color: brown[200] }} />
                Transfer
              </Box>
            </Tooltip>
          </MenuItem>
        </Menu>
      </Box>
    );
  };
  const columns = [
    {
      field: 'mumeneen_info', // Single column for combined photo and info
      headerName: 'Mumeneen Info',
      width: 550, // Adjust the width to fit both photo and details
      renderCell: (params) => (
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          {/* Photo */}
          <div style={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            marginRight: '16px', // Space between photo and text
          }}>
            <img
              src={params.row.photo ? params.row.photo.file_url : '/static/images/avatar-placeholder.png'}
              alt="User Photo"
              style={{
                width: 80,
                height: 90,
                border: '2px solid #ddd',
                borderRadius: '8px',
                objectFit: 'cover',
              }}
            />
          </div>

          {/* Mumeneen Info (Text) */}
          <Box sx={{ display: 'flex', flexDirection: 'column', paddingTop: 1 }}>
            {/* Name */}
            <Typography variant="body2" sx={{ fontWeight: 'bold', color: yellow[300] }}>
              <Link
                to={`/mumeneen/${params.row.id}`}
                style={{
                  color: yellow[400],
                  textDecoration: 'none',
                }}
                onMouseEnter={(e) => (e.target.style.color = brown[700])}
                onMouseLeave={(e) => (e.target.style.color = yellow[400])}
              >
                {params.row.name}
              </Link>
            </Typography>

            {/* ITS */}
            <Typography variant="body2" sx={{ fontWeight: 'bold', color: yellow[300] }}>
              ITS: <span style={{ fontWeight: 'normal', color: brown[700] }}> {params.row.its}</span>
            </Typography>

            {/* Mobile */}
            <Typography variant="body2" sx={{ fontWeight: 'bold', color: yellow[300] }}>
              Mobile: <span style={{ fontWeight: 'normal', color: brown[700] }}> {params.row.mobile}</span>
            </Typography>

            {/* Folio No */}
            <Typography variant="body2" sx={{ fontWeight: 'bold', color: yellow[300] }}>
              Folio No: <span style={{ fontWeight: 'normal', color: brown[700] }}> {params.row.folio_no}</span>
            </Typography>

            {/* Sector */}
            <Typography variant="body2" sx={{ fontWeight: 'bold', color: yellow[300] }}>
              Sector: <span style={{ fontWeight: 'normal', color: brown[700] }}> {params.row.sector?.name} - {params.row.sub_sector?.name}</span>
            </Typography>
            {/* Thaali Status */}
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Typography variant="body2" sx={{ fontWeight: 'bold', color: yellow[300] }}>
                Thaali Status:
              </Typography>
              {/* Color-Coded Badge */}
              {params.row.thali_status && (
                <Chip
                  label={params.row.thali_status === 'taking' ? 'Taking' : 'Not Taking'}
                  color={params.row.thali_status === 'taking' ? 'success' : 'error'}
                  sx={{
                    fontWeight: 'bold',
                    textTransform: 'capitalize',
                    fontSize: '12px',
                    height: '25px',
                  }}
                />
              )}
            </Box>
          </Box>
        </Box>
      ),
    },
    // {
    //   field: 'hub_amount',
    //   headerName: 'Hub',
    //   width: 180,
    //   sortable: true,
    //   renderCell: (params) => {
    //     const formattedAmount = new Intl.NumberFormat('en-IN', {
    //       style: 'currency',
    //       currency: 'INR',
    //     }).format(params.row.hub_amount);

    //     return (
    //       <Typography
    //         variant="body2"
    //         sx={{
    // color: '#1976d2',
    // textAlign: 'right',
    // display: 'flex',
    // alignItems: 'center',
    // justifyContent: 'flex-end',
    // height: '100%',
    // fontSize: '18px',
    // fontWeight: 'bold'
    //         }}
    //       >
    //         {formattedAmount}
    //       </Typography>
    //     );
    //   },
    // },
    {
      field: 'hub_amount',
      headerName: 'Hub',
      width: 180,
      sortable: true,
      renderCell: (params) => (
        <Typography
          variant="body2"
          sx={{
            color: '#1976d2',
            textAlign: 'right',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'flex-end',
            height: '100%',
            fontSize: '18px',
            fontWeight: 'bold'
          }}
        >
          {formatCurrency(params.row.hub_amount)}
        </Typography>
      ),
    },
    // {
    //   field: 'paid_amount',
    //   headerName: 'Paid',
    //   width: 180,
    //   sortable: true,
    //   renderCell: (params) => {
    //     const formattedAmount = new Intl.NumberFormat('en-IN', {
    //       style: 'currency',
    //       currency: 'INR',
    //     }).format(params.row.paid_amount);

    //     return (
    //       <Typography
    //         variant="body2"
    //         sx={{
    // color: '#388e3c',
    // textAlign: 'right',
    // display: 'flex',
    // alignItems: 'center',
    // justifyContent: 'flex-end',
    // height: '100%',
    // fontSize: '18px',
    // fontWeight: 'bold'


    //         }}
    //       >
    //         {formattedAmount}
    //       </Typography>
    //     );
    //   },
    // },
    {
      field: 'paid_amount',
      headerName: 'Paid',
      width: 180,
      sortable: true,
      renderCell: (params) => (
        <Typography
          variant="body2"
          sx={{
            color: '#388e3c',
            textAlign: 'right',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'flex-end',
            height: '100%',
            fontSize: '18px',
            fontWeight: 'bold'
          }}
        >
          {formatCurrency(params.row.paid_amount)}
        </Typography>
      ),
    },
    // {
    //   field: 'due_amount',
    //   headerName: 'Due',
    //   width: 180,
    //   sortable: true,
    //   renderCell: (params) => {
    //     const formattedDueAmount = new Intl.NumberFormat('en-IN', {
    //       style: 'currency',
    //       currency: 'INR',
    //     }).format(params.row.due_amount);

    //     const formattedOverdueAmount = new Intl.NumberFormat('en-IN', {
    //       style: 'currency',
    //       currency: 'INR',
    //     }).format(params.row.overdue);

    //     return (
    //       <Box sx={{
    // display: 'flex',
    // flexDirection: 'column',
    // justifyContent: 'center',
    // alignItems: 'flex-end',
    // height: '100%'
    //       }}>
    //         <Typography
    //           variant="body2"
    //           sx={{
    // color: '#d32f2f',
    // // height: '100%' ,
    // fontSize: '18px',
    // fontWeight: 'bold'

    //           }}
    //         >
    //           {formattedDueAmount}
    //         </Typography>
    //         {params.row.overdue > 0 && (
    //           <Typography
    //             variant="body2"
    //             sx={{
    //               // color: '#d32f2f', 
    //               // height: '100%' ,
    // fontSize: '12px',
    // fontWeight: 'bold'

    //             }}
    //           >
    //             Overdue:{formattedOverdueAmount}
    //           </Typography>
    //         )}
    //       </Box>
    //     );
    //   },
    // },
    {
      field: 'due_amount',
      headerName: 'Due',
      width: 180,
      sortable: true,
      renderCell: (params) => {
        const dueAmount = formatCurrency(params.row.due_amount);
        const overdueAmount = formatCurrency(params.row.overdue);

        return (
          <Box sx={{
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'center',
            alignItems: 'flex-end',
            height: '100%'
          }}>
            <Typography
              variant="body2"
              sx={{
                color: '#d32f2f',
                // height: '100%' ,
                fontSize: '18px',
                fontWeight: 'bold'
              }}
            >
              {dueAmount}
            </Typography>
            {params.row.overdue > 0 && (
              <Typography variant="body2" sx={{
                fontSize: '12px',
                fontWeight: 'bold'
              }}>
                Overdue: {overdueAmount}
              </Typography>
            )}
          </Box>
        );
      },
    },
    {
      field: 'action',
      headerName: 'Action',
      width: 220,
      sortable: true,
      renderCell: (params) => {
        const handleActionClick = (action, row) => {
          if (action === 'Add Receipt') {
            setSelectedPersonName(row.name); // Set the person's name from the row data
            handleReceiptDialogOpen();       // Open the Add Receipt dialog
          } else if (action === 'Edit Hub') {
            handleHubDialogOpen();
          }
        };

        return (
          <Box sx={{ display: 'flex', justifyContent: 'center' }}>
            <ActionButtonWithOptions
              onActionClick={(action) => {
                if (action === 'Edit Hub') {
                  setSelectedPersonName(params.row.name); // Ensure the selected person name is set
                  handleHubDialogOpen(); // Open the Hub dialog
                }
                if (action === 'Add Receipt') {
                  setSelectedPersonName(params.row.name); // Ensure the selected person name is set
                  handleReceiptDialogOpen(); // Open the Receipt dialog
                }
                console.log(action);
              }}
              row={params.row}
            />
          </Box>
        );
      },
    },

  ];




  useEffect(() => {
    if (loading || !token) return;

    const fetchData = async () => {
      try {
        const sectorParams = sector.map((s) => `sector[]=${encodeURIComponent(s)}`).join("&");
        const subSectorParams = subSector.map((s) => `sub_sector[]=${encodeURIComponent(s)}`).join("&");

        const url = `https://api.fmb52.com/api/get_all_user?year=${year}&${sectorParams}&${subSectorParams}`;

        const response = await fetch(url, {
          method: "GET",
          headers: {
            "Authorization": `Bearer ${token}`, // Include Bearer token in headers
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          throw new Error(`Error ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log(data);
        console.log(data.data)
        setRows(data.data || []);
      } catch (error) {
        setApiError('The data is currently unavailable, but we are working to resolve this. Thank you for your patience!'); // Set the error message
        setRows([]); // Ensure the table is empty when an error occurs
      }
    };

    fetchData();
  }, [token, loading, year, sector, subSector]);

  // Filter rows based on filterText and filterType
  const filteredRows = rows.filter((row) => {
    const matchesFilterText =
      row.name?.toLowerCase().includes(filterText.toLowerCase()) ||
      row.its?.toLowerCase().includes(filterText.toLowerCase()) ||
      row.mobile?.toLowerCase().includes(filterText.toLowerCase()) ||
      row.folio_no?.toLowerCase().includes(filterText.toLowerCase()) ||
      row.sector?.name?.toLowerCase().includes(filterText.toLowerCase()) ||
      row.sub_sector?.name?.toLowerCase().includes(filterText.toLowerCase()) ||
      row.hof_its?.toLowerCase().includes(filterText.toLowerCase()) ||
      row.mumeneen_type?.toLowerCase().includes(filterText.toLowerCase()) ||
      row.hub_amount?.toString().includes(filterText) ||
      row.paid_amount?.toString().includes(filterText) ||
      row.due_amount?.toString().includes(filterText) ||
      row.overdue?.toString().includes(filterText);

    //     // Sector condition
    //   const matchesSector =
    //   selectedSector === 'all' || !selectedSector || row.sector?.toLowerCase() === selectedSector.toLowerCase();

    // // Sub-Sector condition
    // const matchesSubSector =
    //   selectedSubSector === 'all' || !selectedSubSector || row.sub_sector?.toLowerCase() === selectedSubSector.toLowerCase();

    // Year condition
    // const matchesYear = selectedYear === 'all' || !selectedYear || row.year?.toString() === selectedYear;


    const matchesFilterType =
      filterType === 'All' ||
      (row.mumeneen_type &&
        row.mumeneen_type.trim().toUpperCase() === filterType.trim().toUpperCase());

    return matchesFilterText && matchesFilterType;
  });

  // Function to convert numbers to words (supports up to crores)
  const numberToWords = (num) => {
    const ones = [
      '', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine',
      'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen',
    ];
    const tens = [
      '', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety',
    ];

    const convertToWords = (n) => {
      if (n < 20) return ones[n];
      if (n < 100) return tens[Math.floor(n / 10)] + ' ' + ones[n % 10];
      if (n < 1000) return ones[Math.floor(n / 100)] + ' Hundred ' + convertToWords(n % 100);
      if (n < 100000) return convertToWords(Math.floor(n / 1000)) + ' Thousand ' + convertToWords(n % 1000);
      if (n < 10000000) return convertToWords(Math.floor(n / 100000)) + ' Lakh ' + convertToWords(n % 100000);
      return convertToWords(Math.floor(n / 10000000)) + ' Crore ' + convertToWords(n % 10000000);
    };

    if (!num || isNaN(num)) return '';
    return convertToWords(Number(num)).trim() + ' Only';
  };


  return (
    <AppTheme>
      <CssBaseline />
      <Box sx={{ width: '100%', overflowX: 'auto', mt: 7, pt: 9, pr: 2, pb: 3, pl: 2 }}>
        <Paper
          sx={{
            width: '100%',
            boxShadow: 1,
            overflowX: 'auto',
            p: 1,
            '@media (max-width: 600px)': {
              p: 1,
            },
          }}
        >
          <Box
            sx={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              flexWrap: 'wrap',
              gap: 2,
            }}
          >


            <TextField
              label="Search"
              variant="outlined"
              value={filterText}
              onChange={(e) => setFilterText(e.target.value)}
              sx={{ width: { xs: '100%', sm: '300px' } }}
              InputProps={{
                sx: {
                  height: '52px',
                  display: 'flex',
                  alignItems: 'center',
                  mb: '7px',
                },
              }}
            />
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              {/* Add New Family Button */}

              <Button
                variant="outlined"
                color="primary"
                onClick={handleAddFamilyClick}
                sx={{ fontSize: '14px', padding: '6px 16px' }}
              >
                <AddCircleIcon sx={{ marginRight: '8px' }} />Add New Family
              </Button>
              <FormControl sx={{ minWidth: 150, width: { xs: '100%', sm: '150px' } }}>
                <InputLabel>Filter By</InputLabel>
                <Select value={filterType} label="Filter By" onChange={(e) => setFilterType(e.target.value)}>
                  <MenuItem value="All">All</MenuItem>
                  <MenuItem value="HOF">HOF</MenuItem>
                  <MenuItem value="FM">FM</MenuItem>
                </Select>
              </FormControl>


            </Box>
          </Box>
          <div style={{ height: 700, width: '100%', overflow: 'auto' }}>

            <DataGridPro
              rows={filteredRows}
              columns={columns}
              loading={loading}
              components={{
                Toolbar: GridToolbar, NoRowsOverlay: () => (
                  <Box
                    sx={{
                      display: 'flex',
                      flexDirection: 'column',
                      alignItems: 'center',
                      justifyContent: 'center',
                      height: '100%',
                      backgroundColor: '#f9f9f9',
                      color: '#555',
                    }}
                  >
                    {apiError ? (
                      <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
                        {apiError}
                      </Typography>
                    ) : (
                      <>
                        <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
                          No data available yet
                        </Typography>
                        <Typography variant="body2">
                          Please add entries or adjust filters to display data here.
                        </Typography>
                      </>
                    )}
                  </Box>
                ),
              }}
              localeText={customLocaleText}
              rowHeight={135}
              checkboxSelection
              disableSelectionOnClick
              pagination
              paginationMode="client"
              paginationModel={paginationModel}
              onPaginationModelChange={(model) => setPaginationModel(model)}
              pageSizeOptions={[5, 10, 25, 50, 100]}
              sortModel={sortModel}
              onSortModelChange={(model) => setSortModel(model)}
              getRowId={(row) => row.its || Math.random()}
              sx={{
                '& .MuiDataGrid-columnHeaders': {
                  color: yellow[400],
                  textAlign: 'center',
                  position: 'sticky',
                  top: 0,
                  zIndex: 1,
                },

                '& .MuiDataGrid-columnHeader:focus, .MuiDataGrid-columnHeader:focus-within': {
                  outline: 'none',
                },
                '& .MuiDataGrid-columnHeaderTitle': {
                  fontWeight: 'bold',
                  textAlign: 'center'
                },
                '& .MuiDataGrid-cell': {
                  '&:hover': {
                    backgroundColor: yellow[200],
                  },
                },
                '& .MuiDataGrid-row:hover': {
                  backgroundColor: yellow[100],
                },
                '@media (max-width: 600px)': {
                  '& .MuiDataGrid-columnHeaders': {
                    fontSize: '0.75rem',
                  },
                  '& .MuiDataGrid-cell': {
                    fontSize: '0.75rem',
                  },
                  '& .MuiDataGrid-overlay': {
                    backgroundColor: 'blue', // Optional background color for overlay
                  },
                },
              }}
            />
          </div>
        </Paper>
      </Box>
      <Dialog open={openFamilyDialog} onClose={handleFamilyDialogClose}>
        <DialogTitle>Add Family Details</DialogTitle>
        <DialogContent>
          <Typography variant="body1" marginBottom={2}>
            Please fill out the details below:
          </Typography>
          <TextField
            select
            label="HOF Prefix"
            name="hofPrefix"
            value={familyData.hofPrefix}
            onChange={handleInputChange}
            fullWidth
            margin="normal"
          >
            <MenuItem value="shaikh">Shaikh</MenuItem>
            <MenuItem value="mulla">Mulla</MenuItem>
            {/* <MenuItem value="Ms">Ms</MenuItem> */}
          </TextField>
          <TextField
            label="HOF Name"
            name="hofName"
            value={familyData.hofName}
            onChange={handleInputChange}
            fullWidth
            margin="normal"
          />
          <TextField
            label="HOF ITS"
            name="hofITS"
            value={familyData.hofITS}
            onChange={handleInputChange}
            fullWidth
            margin="normal"
          />
          <TextField
            select
            label="Sector"
            name="sector"
            value={familyData.sector}
            onChange={handleInputChange}
            fullWidth
            margin="normal"
          >
            <MenuItem value="Sector 1">Sector 1</MenuItem>
            <MenuItem value="Sector 2">Sector 2</MenuItem>
          </TextField>
          <TextField
            select
            label="Sub Sector"
            name="subSector"
            value={familyData.subSector}
            onChange={handleInputChange}
            fullWidth
            margin="normal"
          >
            <MenuItem value="Sub Sector A">Sub Sector A</MenuItem>
            <MenuItem value="Sub Sector B">Sub Sector B</MenuItem>
          </TextField>
          <TextField
            label="Folio No"
            name="folioNo"
            value={familyData.folioNo}
            onChange={handleInputChange}
            fullWidth
            margin="normal"
          />
          <TextField
            select
            label="Gender"
            name="gender"
            value={familyData.gender}
            onChange={handleInputChange}
            fullWidth
            margin="normal"
          >
            <MenuItem value="Male">Male</MenuItem>
            <MenuItem value="Female">Female</MenuItem>
          </TextField>
          <TextField
            label="HOF Mobile No"
            name="hofMobile"
            value={familyData.hofMobile}
            onChange={handleInputChange}
            fullWidth
            margin="normal"
          />
          <TextField
            label="Email"
            name="email"
            value={familyData.email}
            onChange={handleInputChange}
            fullWidth
            margin="normal"
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleFamilyDialogClose} color="primary">
            Cancel
          </Button>
          <Button onClick={handleFormFamilySubmit} color="primary">
            Confirm
          </Button>
        </DialogActions>
      </Dialog>
      <Dialog open={openReceiptDialog} onClose={handleReceiptDialogClose} maxWidth="sm" fullWidth>
        <DialogTitle>
          Add Receipt for {selectedPersonName || 'Selected Person'}
        </DialogTitle>
        <DialogContent>
          {/* Mode Dropdown */}
          <FormControl fullWidth margin="dense">
            <InputLabel>Mode</InputLabel>
            <Select
              name="mode"
              value={receiptData.mode}
              onChange={handleReceiptInputChange}
            >
              <MenuItem value="Cash">Cash</MenuItem>
              <MenuItem value="NEFT">NEFT</MenuItem>
              <MenuItem value="Online Payment">Online Payment</MenuItem>
              <MenuItem value="Cheque">Cheque</MenuItem>
            </Select>
          </FormControl>
          {/* Conditionally Rendered Fields */}
          {receiptData.mode === 'Cheque' && (
            <>
              <TextField
                margin="dense"
                label="Receipt Name"
                name="receiptName"
                fullWidth
                value={receiptData.receiptName}
                onChange={handleReceiptInputChange}
              />
              <TextField
                margin="dense"
                label="Bank Name"
                name="bankName"
                fullWidth
                value={receiptData.bankName}
                onChange={handleReceiptInputChange}
              />
              <TextField
                margin="dense"
                label="IFSC"
                name="ifsc"
                fullWidth
                value={receiptData.ifsc}
                onChange={handleReceiptInputChange}
              />
              <TextField
                margin="dense"
                label="Cheque No"
                name="chequeNo"
                fullWidth
                value={receiptData.chequeNo}
                onChange={handleReceiptInputChange}
              />
              <TextField
                margin="dense"
                label="Cheque Date"
                name="chequeDate"
                type="date"
                fullWidth
                InputLabelProps={{ shrink: true }}
                value={receiptData.chequeDate}
                onChange={handleReceiptInputChange}
              />
            </>
          )}

          {receiptData.mode === 'NEFT' && (
            <>
              <TextField
                margin="dense"
                label="Receipt Name"
                name="receiptName"
                fullWidth
                value={receiptData.receiptName}
                onChange={handleReceiptInputChange}
              />
              <TextField
                margin="dense"
                label="Transaction ID"
                name="transactionId"
                fullWidth
                value={receiptData.transactionId}
                onChange={handleReceiptInputChange}
              />
              <TextField
                margin="dense"
                label="Transaction Date"
                name="transactionDate"
                type="date"
                fullWidth
                InputLabelProps={{ shrink: true }}
                value={receiptData.transactionDate}
                onChange={handleReceiptInputChange}
              />
            </>
          )}

          {/* Other Fields */}
          <TextField
            margin="dense"
            label="Amount"
            name="amount"
            type="number"
            fullWidth
            value={receiptData.amount}
            onChange={handleReceiptInputChange}
            helperText={amountInWords || 'Enter amount in numbers'} // Shows amount in words
          />

          <TextField
            margin="dense"
            label="Comments"
            name="comments"
            multiline
            rows={3}
            fullWidth
            value={receiptData.comments}
            onChange={handleReceiptInputChange}
          />
        </DialogContent>

        <DialogActions>
          {/* Cancel Button with Red Border and Text */}
          <Button
            onClick={handleReceiptDialogClose}
            sx={{
              padding: '8px 16px',
              margin: 2,
              border: '2px solid #f44336', // Red border
              color: '#f44336', // Red text
              textTransform: 'none',
              '&:hover': {
                backgroundColor: '#ffebee', // Light red on hover
                borderColor: '#d32f2f',
              },
            }}
          >
            Cancel
          </Button>

          {/* Submit Button with Green Border and Text */}
          <Button
            onClick={handleReceiptFormSubmit}
            sx={{
              padding: '8px 16px',
              margin: 2,
              border: '2px solid #4caf50', // Green border
              color: '#4caf50', // Green text
              textTransform: 'none',
              '&:hover': {
                backgroundColor: '#e8f5e9', // Light green on hover
                borderColor: '#388e3c',
              },
            }}
          >
            Submit
          </Button>
        </DialogActions>

      </Dialog>
      <Dialog
      open={openHubDialog}
      onClose={handleHubDialogClose}
      maxWidth="md"
      fullWidth
      sx={{
        '& .MuiDialog-paper': {
          minHeight: '300px',
          padding: 2,
        },
      }}
    >
      <DialogTitle>Edit Hub Details</DialogTitle>
      <DialogContent>
        {/* User Details */}
        <Typography variant="body1" sx={{ marginBottom: 2 }}>
          <strong>Name:</strong> {selectedPersonName || 'N/A'}
        </Typography>
        <Typography variant="body1" sx={{ marginBottom: 2 }}>
          <strong>ITS:</strong> {selectedUserDetails.its || 'N/A'}
        </Typography>
        <Typography variant="body1" sx={{ marginBottom: 2 }}>
          <strong>Sector:</strong> {selectedUserDetails.sector} - {selectedUserDetails.subSector}
        </Typography>
        <Typography variant="body1" sx={{ marginBottom: 2 }}>
          <strong>Folio:</strong> {selectedUserDetails.folio}
        </Typography>
        <Typography variant="body1" sx={{ marginBottom: 2 }}>
          <strong>Year:</strong> {selectedUserDetails.year}
        </Typography>
        {console.log("hub amount",)}

        {/* Hub Amount Input */}
        <TextField
          margin="dense"
          label="Hub Amount"
          name="amount"
          type="number"
          fullWidth
          value={hubData.amount}
          onChange={handleHubInputChange}
          helperText={amountInWords || 'Enter amount in numbers'}
        />
      </DialogContent>
      <DialogActions>
        <Button
          onClick={handleHubDialogClose}
          sx={{
            padding: '8px 16px',
            margin: 2,
            border: '2px solid #f44336',
            color: '#f44336',
            textTransform: 'none',
            '&:hover': {
              backgroundColor: '#ffebee',
              borderColor: '#d32f2f',
            },
          }}
        >
          Cancel
        </Button>
        <Button
          onClick={handleHubFormSubmit}
          sx={{
            padding: '8px 16px',
            margin: 2,
            border: '2px solid #4caf50',
            color: '#4caf50',
            textTransform: 'none',
            '&:hover': {
              backgroundColor: '#e8f5e9',
              borderColor: '#388e3c',
            },
          }}
        >
          Confirm
        </Button>
      </DialogActions>
    </Dialog>


    </AppTheme>
  );
}

export default MumeneenTable;
